"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0});var t=e(require("web-push"));function s(e){if(e.__esModule)return e;var t=e.default;if("function"==typeof t){var s=function e(){return this instanceof e?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};s.prototype=t.prototype}else s={};return Object.defineProperty(s,"__esModule",{value:!0}),Object.keys(e).forEach((function(t){var i=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(s,t,i.get?i:{enumerable:!0,get:function(){return e[t]}})})),s}const i="BFtsHOr4nnMmA9zvImAR-XRXZ89IpppbjYaZ93L2YqkombTbXyhYXwMLJ9BnChssfIcoS6P4LYp-W1G7pqdk-RQ",r="7JgjG-jzXykKfbpt7XtZa6Po_e1siUA_65B0jAaMBx8";var o=s(Object.freeze({__proto__:null,PushNotificationServer:class{constructor(e){this.publicKey=e.publicKey,this.privateKey=e.privateKey,this.email=e.email,this.subscriptions=new Map,console.log(this.subscriptions),t.default.setVapidDetails(`mailto:${this.email||"jfixcoding@gmail"}`,this.publicKey||i,this.privateKey||r)}setupRoutes(e){e.post("/save-subscription",this.saveSubscription.bind(this)),e.post("/send-notification",this.sendNotification.bind(this)),e.get("/vapid-public-key",((e,t)=>{t.json({publicKey:this.publicKey||i})}))}saveSubscription(e,t){const{user:s,key:i}=e.body,r=i?.keys?.auth;console.log(this.subscriptions,r),this.subscriptions.has(i.endpoint)||this.subscriptions.set(i.endpoint,{userAuth:r,key:i}),t.status(200).json({status:"success",message:"Subscription saved!"})}async sendNotification(e,s){const i=e.body;if(console.log(this.subscriptions,i),0===this.subscriptions.size)return s.status(400).json({status:"error",message:"No subscriptions found"});try{const e=await Promise.all(Array.from(this.subscriptions.values()).map((e=>t.default.sendNotification(e.key,JSON.stringify(i)).then((()=>({success:!0}))).catch((e=>({success:!1,error:e.message})))))),r=e.filter((e=>e.success)).length,o=e.length-r;s.status(200).json({status:"success",message:`Notifications sent! Success: ${r}, Failures: ${o}`})}catch(e){s.status(500).json({status:"error",message:"Internal server error"})}}}}));"undefined"==typeof window&&(module.exports.PushNotificationServer=o.PushNotificationServer),exports.PushNotificationClient=class{constructor(e){this.serverUrl=e.serverUrl,this.publicVapidKey=e.publicVapidKey,this.swPath=e.swPath||"/sw.js",this.userId=e.userId}urlBase64ToUint8Array(e){const t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),s=window.atob(t),i=new Uint8Array(s.length);for(let e=0;e<s.length;++e)i[e]=s.charCodeAt(e);return i}async initialize(){"serviceWorker"in navigator&&"PushManager"in window||console.log("Push notifications are not supported");"granted"!==await Notification.requestPermission()&&console.log("Notification permission not granted");try{if(!this.publicVapidKey){const e=await fetch(`${this.serverUrl}/vapid-public-key`),t=await e.json();this.publicVapidKey=t.publicKey}const e=await navigator.serviceWorker.register(this.swPath);await navigator.serviceWorker.ready;let t=await e.pushManager.getSubscription();if(!t){const s=this.urlBase64ToUint8Array(this.publicVapidKey);t=await e.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:s})}return await this.saveSubscription(t),t}catch(e){return console.error(`Service Worker Registration failed: ${e.message}`),"There's an error"}}async saveSubscription(e){return(await fetch(`${this.serverUrl}/save-subscription`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user:this.userId,key:e})})).json()}async sendNotification(e){try{return(await fetch(`${this.serverUrl}/send-notification`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}catch(e){console.log(e)}}};
