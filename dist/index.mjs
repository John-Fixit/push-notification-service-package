import t from"web-push";function e(t){if(t.__esModule)return t;var e=t.default;if("function"==typeof e){var s=function t(){return this instanceof t?Reflect.construct(e,arguments,this.constructor):e.apply(this,arguments)};s.prototype=e.prototype}else s={};return Object.defineProperty(s,"__esModule",{value:!0}),Object.keys(t).forEach((function(e){var i=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(s,e,i.get?i:{enumerable:!0,get:function(){return t[e]}})})),s}const s="BFtsHOr4nnMmA9zvImAR-XRXZ89IpppbjYaZ93L2YqkombTbXyhYXwMLJ9BnChssfIcoS6P4LYp-W1G7pqdk-RQ",i="7JgjG-jzXykKfbpt7XtZa6Po_e1siUA_65B0jAaMBx8";var r=e(Object.freeze({__proto__:null,PushNotificationServer:class{constructor(e){this.publicKey=e.publicKey,this.privateKey=e.privateKey,this.email=e.email,this.subscriptions=new Map,t.setVapidDetails(`mailto:${this.email||"jfixcoding@gmail"}`,this.publicKey||s,this.privateKey||i)}setupRoutes(t){t.post("/save-subscription",this.saveSubscription.bind(this)),t.post("/send-notification",this.sendNotification.bind(this)),t.get("/vapid-public-key",((t,e)=>{e.json({publicKey:this.publicKey||s})}))}saveSubscription(t,e){const{user:s,key:i}=t.body,r=i?.keys?.auth;this.subscriptions.has(i.endpoint)||this.subscriptions.set(i.endpoint,{userAuth:r,key:i}),e.status(200).json({status:"success",message:"Subscription saved!"})}async sendNotification(e,s){const i=e.body;if(0===this.subscriptions.size)return s.status(400).json({status:"error",message:"No subscriptions found"});try{const e=await Promise.all(Array.from(this.subscriptions.values()).map((e=>t.sendNotification(e.key,JSON.stringify(i)).then((()=>({success:!0}))).catch((t=>({success:!1,error:t.message})))))),r=e.filter((t=>t.success)).length,o=e.length-r;s.status(200).json({status:"success",message:`Notifications sent! Success: ${r}, Failures: ${o}`})}catch(t){s.status(500).json({status:"error",message:"Internal server error"})}}}}));class o{constructor(t){this.serverUrl=t.serverUrl,this.publicVapidKey=t.publicVapidKey,this.swPath=t.swPath||"/sw.js",this.userId=t.userId}urlBase64ToUint8Array(t){const e=(t+"=".repeat((4-t.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),s=window.atob(e),i=new Uint8Array(s.length);for(let t=0;t<s.length;++t)i[t]=s.charCodeAt(t);return i}async initialize(){"serviceWorker"in navigator&&"PushManager"in window||console.log("Push notifications are not supported");"granted"!==await Notification.requestPermission()&&console.log("Notification permission not granted");try{if(!this.publicVapidKey){const t=await fetch(`${this.serverUrl}/vapid-public-key`),e=await t.json();this.publicVapidKey=e.publicKey}const t=await navigator.serviceWorker.register(this.swPath);await navigator.serviceWorker.ready;let e=await t.pushManager.getSubscription();if(!e){const s=this.urlBase64ToUint8Array(this.publicVapidKey);e=await t.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:s})}return await this.saveSubscription(e),e}catch(t){console.error(`Service Worker Registration failed: ${t.message}`)}}async saveSubscription(t){return(await fetch(`${this.serverUrl}/save-subscription`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user:this.userId,key:t})})).json()}async sendNotification(t){try{return(await fetch(`${this.serverUrl}/send-notification`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})).json()}catch(t){console.log(t)}}}"undefined"==typeof window&&(module.exports.PushNotificationServer=r.PushNotificationServer);export{o as PushNotificationClient};
